generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id           Int      @id @default(autoincrement())
  nome         String
  email        String   @unique
  telefone     String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  pedidos      Pedido[]
}

model Produto {
  id                Int          @id @default(autoincrement())
  nome              String
  descricao         String?
  preco             Decimal      @db.Decimal(10, 2)
  quantidadeEstoque Int          @default(0)
  criadoEm          DateTime     @default(now())
  atualizadoEm      DateTime     @updatedAt
  itens             ItemPedido[]
}

model Pedido {
  id          Int          @id @default(autoincrement())
  clienteId   Int
  dataCriacao DateTime     @default(now())
  total       Decimal      @default(0) @db.Decimal(12, 2)
  itens       ItemPedido[]
  cliente     Cliente      @relation(fields: [clienteId], references: [id])
}

model ItemPedido {
  id         Int     @id @default(autoincrement())
  pedidoId   Int
  produtoId  Int
  quantidade Int     @default(1)
  subtotal   Decimal @default(0) @db.Decimal(12, 2)
  pedido     Pedido  @relation(fields: [pedidoId], references: [id])
  produto    Produto @relation(fields: [produtoId], references: [id])
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Client {
  id        String   @id @default(cuid())
  name      String
  document  String   @unique
  email     String?  @db.VarChar(255)
  phone     String?  @db.VarChar(30)
  address   String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int        @default(0)
  category    String?
  sku         String?    @unique
  active      Boolean    @default(true)
  createAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  sale_items  SaleItem[]

  @@map("products")
}

model Sale {
  id            String     @id @default(cuid())
  clientId      String
  total         Float
  status        String     @default("peding")
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  paymentMethod String?
  items         SaleItem[]
  client        Client     @relation(fields: [clientId], references: [id])

  @@map("sales")
}

model SaleItem {
  id        String   @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Float
  subtotal  Float
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}
